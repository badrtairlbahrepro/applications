// Sélection des éléments du DOM const todoForm = document.getElementById('todo-form');const todoInput = document.getElementById('todo-input');const todoList = document.getElementById('todo-list');let dragSrcEl = null; // Élément source drag start function handleDragStart(e) {this.classList.add('dragging');dragSrcEl = this;e.dataTransfer.effectAllowed = 'move';e.dataTransfer.setData('text/html', this.innerHTML);} // Drag over function handleDragOver(e) {if(e.preventDefault) e.preventDefault();e.dataTransfer.dropEffect = 'move';return false;} // Drop function handleDrop(e) {if(e.stopPropagation) e.stopPropagation();if(dragSrcEl !== this) {dragSrcEl.innerHTML = this.innerHTML;this.innerHTML = e.dataTransfer.getData('text/html');updateEventListeners(dragSrcEl);updateEventListeners(this);} return false;} // Drag end function handleDragEnd(e) {this.classList.remove('dragging');} // Mise à jour des événements sur les items (utile après échange innerHTML) function updateEventListeners(item) {item.addEventListener('dragstart', handleDragStart);item.addEventListener('dragover', handleDragOver);item.addEventListener('drop', handleDrop);item.addEventListener('dragend', handleDragEnd);const deleteBtn = item.querySelector('.delete-btn');if(deleteBtn) {deleteBtn.addEventListener('click', handleDelete);} } // Supprimer une tâche function handleDelete(e) {const item = e.target.closest('li');if(item) {todoList.removeChild(item);} } // Ajouter une tâche function addTodoItem(taskText) {const li = document.createElement('li');li.setAttribute('draggable', 'true');li.setAttribute('tabindex', '0');li.innerHTML = `<span class="task-text">${taskText}</span><button class="delete-btn" aria-label="Supprimer la tâche">&times;</button>`;updateEventListeners(li);todoList.appendChild(li);} // Gérer la soumission du formulaire todoForm.addEventListener('submit', e => {e.preventDefault();const task = todoInput.value.trim();if(task){addTodoItem(task);todoInput.value = '';todoInput.focus();}});